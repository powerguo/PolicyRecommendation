dplyr::select(yes, no)
o.choice <- as.matrix(o.choice)
m1.model <- stan_glm(formula = o.choice ~ 1 + (p1.utility) + (p2.utility) + (p3.utility) + (p4.utility), data = new.data, family = binomial(),
prior = normal())
all.models <- m1.model$coefficients
all.covmat <- m1.model$covmat
my.list <- list(new.data, all.models, all.covmat, m1.model)
return(my.list)
}
doptimal.group.search <- function(nruns, t){
correlation <- c()
regret <- c()
for(i in 1:nruns){
random.search <- group.recommendation.doptimalonly(t)
random.ranking <- as.matrix(people.utility)%*%as.matrix(random.search[2][[1]][2:5])
correlation[i] <- cor(random.ranking, group.utility$group.score)
print(correlation)
group.utility1 <- group.utility%>%
mutate(new.score = random.search[2][[1]][2]*p1.utility + random.search[2][[1]][3]*p2.utility + random.search[2][[1]][4] * p3.utility
+ random.search[2][[1]][5] * p4.utility)%>%
arrange(desc(new.score))
regret[i] <- group.utility$group.score[1] - group.utility1$group.score[1]
print(regret)
}
mylist <- list(correlation, regret)
return(mylist)
}
test.doptimal <- doptimal.group.search(5, 15)
test.doptimal2 <- doptimal.group.search(20, 15)
test.doptimal3 <- doptimal.group.search(55, 15)
doptimal.correlation <- list.append(test.doptimal[[1]], test.doptimal2[[1]], test.doptimal3[[1]])
#UCB Group helper function
aggressive.group.search <- function(nruns, t){
correlation <- c()
regret <- c()
for(i in 1:nruns){
random.search <- group.recommendation(t)
random.ranking <- as.matrix(people.utility)%*%as.matrix(random.search[2][[1]][[15]][2:5])
correlation[i] <- cor(random.ranking, group.utility$group.score)
print(correlation)
group.utility1 <- group.utility%>%
mutate(new.score = random.search[2][[1]][[15]][2]*p1.utility + random.search[2][[1]][[15]][3]*p2.utility + random.search[2][[1]][[15]][4] * p3.utility
+ random.search[2][[1]][[15]][5] * p4.utility)%>%
arrange(desc(new.score))
regret[i] <- group.utility$group.score[1] - group.utility1$group.score[1]
print(regret)
}
mylist <- list(correlation, regret)
return(mylist)
}
test.upperconfidence <- aggressive.group.search(5, 15)
test.upperconfidence2 <- aggressive.group.search(10, 15)
test.upperconfidence3 <- aggressive.group.search(10, 15)
ntest.upperconfidence4 <- aggressive.group.search(20, 15)
test.upperconfidence5 <- aggressive.group.search(25, 15)
test.upperconfidence6 <- aggressive.group.search(10, 15)
upperconfidence.correlation <- list.append(test.upperconfidence[[1]], test.upperconfidence2[[1]], test.upperconfidence3[[1]], ntest.upperconfidence4[[1]], test.upperconfidence5[[1]])
mean(upperconfidence.correlation)
var(upperconfidence.correlation)
upperconfidence.regret <- list.append(test.upperconfidence[[2]], test.upperconfidence2[[2]], test.upperconfidence3[[2]], test.upperconfidence4[[2]], test.upperconfidence5[[2]])
mean(upperconfidence.regret)
var(upperconfidence.regret)
hybrid.group.search <- function(nruns, t){
correlation <- c()
regret <- c()
for(i in 1:nruns){
random.search <- group.recommendation.hybrid(t)
random.ranking <- as.matrix(people.utility)%*%as.matrix(random.search[[2]][2:5])
correlation[i] <- cor(random.ranking, group.utility$group.score)
print(correlation)
group.utility1 <- group.utility%>%
mutate(new.score = random.search[[2]][2]*p1.utility + random.search[[2]][3]*p2.utility + random.search[[2]][4] * p3.utility
+ random.search[[2]][5] * p4.utility)%>%
arrange(desc(new.score))
regret[i] <- group.utility$group.score[1] - group.utility1$group.score[1]
print(regret)
}
mylist <- list(correlation, regret)
return(mylist)
}
group.recommendation.hybrid <- function(t){
all.models <- c()
all.covmat <- c()
new.data <- group.utility
optimal.design.matrix <- as.matrix(group.utility[8:12])
doptimaldesign <- Dopt.design(t-5, data = optimal.design.matrix, formula = ~p1.utility + p2.utility + p3.utility + p4.utility)
id.optimal <- doptimaldesign$id
optimal.data <- subset(group.utility, id %in% id.optimal)
new.data <- optimal.data%>%
mutate(p1.vote = exp(p1.utility)/(1+exp(p1.utility)))%>%
mutate(p2.vote = exp(p2.utility)/(1+exp(p2.utility)))%>%
mutate(p3.vote = exp(p3.utility)/(1+exp(p3.utility)))%>%
mutate(p4.vote = exp(p4.utility)/(1+exp(p4.utility)))%>%
mutate(p1.choice = as.numeric(rbinom(n(), 1, p1.vote)))%>%
mutate(p2.choice = as.numeric(rbinom(n(), 1, p2.vote)))%>%
mutate(p3.choice = as.numeric(rbinom(n(), 1, p3.vote)))%>%
mutate(p4.choice = as.numeric(rbinom(n(), 1, p4.vote)))
outcome.choice <- as.matrix(new.data[,c("p1.choice", "p2.choice", "p3.choice", "p4.choice")])
o.choice <- as.data.frame(outcome.choice)%>%
mutate(yes = p1.choice + p2.choice + p3.choice + p4.choice)%>%
mutate(no = 4 - yes)%>%
dplyr::select(yes, no)
o.choice <- as.matrix(o.choice)
m1.model <- stan_glm(formula = o.choice ~ 1 + (p1.utility) + (p2.utility) + (p3.utility) + (p4.utility), data = new.data, family = binomial(),
prior = normal())
for (j in 11:t){
u.diagnostic <- c()
u.ranking <- c()
u.id <- c()
all.utility <- c()
all.models <- c()
id.chosen <- new.data$id
outcome.choice <- as.matrix(new.data[,c("p1.choice", "p2.choice", "p3.choice", "p4.choice")])
o.choice <- as.data.frame(outcome.choice)%>%
mutate(yes = p1.choice + p2.choice + p3.choice + p4.choice)%>%
mutate(no = 4 - yes)%>%
dplyr::select(yes, no)
o.choice <- as.matrix(o.choice)
p1.ut <- group.utility$p1.utility
p2.ut <- group.utility$p2.utility
p3.ut <- group.utility$p3.utility
p4.ut <- group.utility$p4.utility
m1.model <- stan_glm(formula = o.choice ~ 1 + (p1.utility) + (p2.utility) + (p3.utility) + (p4.utility), data = new.data, family = binomial(),
prior = normal())
var.left <- p1.ut^2*var.model[2]+p2.ut^2*var.model[3] + p3.ut^2 * var.model[4] + p4.ut^2 * var.model[5]
var.right <- p1.ut*p2.ut*m1.model$covmat[2, 3] + p1.ut*p3.ut*m1.model$covmat[2, 4] + p1.ut * p4.ut * m1.model$covmat[2, 5] +
p2.ut*p3.ut*m1.model$covmat[3, 4] + p2.ut*p4.ut*m1.model$covmat[3, 5] + p3.ut*p4.ut * m1.model$covmat[4, 5]
var.total <- var.left + var.right
people.utility <- group.utility[, 9:12]
mean.total <- as.matrix(people.utility)%*%m1.model$coefficients[2:5]
beta.init <- 2* log((4*j*pi^2)/(6))
new.utility <- as.data.frame(cbind(group.utility, var.total, mean.total))%>%
mutate(new.utility = mean.total + sqrt(beta.init)*sqrt(var.total))
max.utility.row <- which.max(new.utility$new.utility)
new.ranking <- new.utility%>%
arrange(desc(new.utility))
new.alt.id <- new.ranking$id[1]
new.alt <- group.utility%>%
dplyr::filter(id == new.alt.id)
new.alter <- new.alt%>%
mutate(p1.vote = exp(p1.utility)/(1+exp(p1.utility)))%>%
mutate(p2.vote = exp(p2.utility)/(1+exp(p2.utility)))%>%
mutate(p3.vote = exp(p3.utility)/(1+exp(p3.utility)))%>%
mutate(p4.vote = exp(p4.utility)/(1+exp(p4.utility)))%>%
mutate(p1.choice = as.numeric(rbinom(n(), 1, p1.vote)))%>%
mutate(p2.choice = as.numeric(rbinom(n(), 1, p2.vote)))%>%
mutate(p3.choice = as.numeric(rbinom(n(), 1, p3.vote)))%>%
mutate(p4.choice = as.numeric(rbinom(n(), 1, p4.vote)))
new.data <- rbind(new.data, new.alter)
}
my.list <- list(new.data, m1.model$coefficients)
return(my.list)
}
hybrid.group.search <- function(nruns, t){
correlation <- c()
regret <- c()
for(i in 1:nruns){
random.search <- group.recommendation.hybrid(t)
random.ranking <- as.matrix(people.utility)%*%as.matrix(random.search[[2]][2:5])
correlation[i] <- cor(random.ranking, group.utility$group.score)
print(correlation)
group.utility1 <- group.utility%>%
mutate(new.score = random.search[[2]][2]*p1.utility + random.search[[2]][3]*p2.utility + random.search[[2]][4] * p3.utility
+ random.search[[2]][5] * p4.utility)%>%
arrange(desc(new.score))
regret[i] <- group.utility$group.score[1] - group.utility1$group.score[1]
print(regret)
}
mylist <- list(correlation, regret)
return(mylist)
}
#Hybrid Approach with 2 UCB pairs
group.recommendation.hybrid2 <- function(t){
all.models <- c()
all.covmat <- c()
new.data <- group.utility
optimal.design.matrix <- as.matrix(group.utility[8:12])
doptimaldesign <- Dopt.design(t-2, data = optimal.design.matrix, formula = ~p1.utility + p2.utility + p3.utility + p4.utility)
id.optimal <- doptimaldesign$id
optimal.data <- subset(group.utility, id %in% id.optimal)
new.data <- optimal.data%>%
mutate(p1.vote = exp(p1.utility)/(1+exp(p1.utility)))%>%
mutate(p2.vote = exp(p2.utility)/(1+exp(p2.utility)))%>%
mutate(p3.vote = exp(p3.utility)/(1+exp(p3.utility)))%>%
mutate(p4.vote = exp(p4.utility)/(1+exp(p4.utility)))%>%
mutate(p1.choice = as.numeric(rbinom(n(), 1, p1.vote)))%>%
mutate(p2.choice = as.numeric(rbinom(n(), 1, p2.vote)))%>%
mutate(p3.choice = as.numeric(rbinom(n(), 1, p3.vote)))%>%
mutate(p4.choice = as.numeric(rbinom(n(), 1, p4.vote)))
outcome.choice <- as.matrix(new.data[,c("p1.choice", "p2.choice", "p3.choice", "p4.choice")])
o.choice <- as.data.frame(outcome.choice)%>%
mutate(yes = p1.choice + p2.choice + p3.choice + p4.choice)%>%
mutate(no = 4 - yes)%>%
dplyr::select(yes, no)
o.choice <- as.matrix(o.choice)
m1.model <- stan_glm(formula = o.choice ~ 1 + (p1.utility) + (p2.utility) + (p3.utility) + (p4.utility), data = new.data, family = binomial(),
prior = normal())
for (j in 14:t){
u.diagnostic <- c()
u.ranking <- c()
u.id <- c()
all.utility <- c()
all.models <- c()
id.chosen <- new.data$id
outcome.choice <- as.matrix(new.data[,c("p1.choice", "p2.choice", "p3.choice", "p4.choice")])
o.choice <- as.data.frame(outcome.choice)%>%
mutate(yes = p1.choice + p2.choice + p3.choice + p4.choice)%>%
mutate(no = 4 - yes)%>%
dplyr::select(yes, no)
o.choice <- as.matrix(o.choice)
p1.ut <- group.utility$p1.utility
p2.ut <- group.utility$p2.utility
p3.ut <- group.utility$p3.utility
p4.ut <- group.utility$p4.utility
m1.model <- stan_glm(formula = o.choice ~ 1 + (p1.utility) + (p2.utility) + (p3.utility) + (p4.utility), data = new.data, family = binomial(),
prior = normal())
var.left <- p1.ut^2*var.model[2]+p2.ut^2*var.model[3] + p3.ut^2 * var.model[4] + p4.ut^2 * var.model[5]
var.right <- p1.ut*p2.ut*m1.model$covmat[2, 3] + p1.ut*p3.ut*m1.model$covmat[2, 4] + p1.ut * p4.ut * m1.model$covmat[2, 5] +
p2.ut*p3.ut*m1.model$covmat[3, 4] + p2.ut*p4.ut*m1.model$covmat[3, 5] + p3.ut*p4.ut * m1.model$covmat[4, 5]
var.total <- var.left + var.right
people.utility <- group.utility[, 9:12]
mean.total <- as.matrix(people.utility)%*%m1.model$coefficients[2:5]
beta.init <- 2* log((4*j*pi^2)/(6))
new.utility <- as.data.frame(cbind(group.utility, var.total, mean.total))%>%
mutate(new.utility = mean.total + sqrt(beta.init)*sqrt(var.total))
max.utility.row <- which.max(new.utility$new.utility)
new.ranking <- new.utility%>%
arrange(desc(new.utility))
new.alt.id <- new.ranking$id[1]
new.alt <- group.utility%>%
dplyr::filter(id == new.alt.id)
new.alter <- new.alt%>%
mutate(p1.vote = exp(p1.utility)/(1+exp(p1.utility)))%>%
mutate(p2.vote = exp(p2.utility)/(1+exp(p2.utility)))%>%
mutate(p3.vote = exp(p3.utility)/(1+exp(p3.utility)))%>%
mutate(p4.vote = exp(p4.utility)/(1+exp(p4.utility)))%>%
mutate(p1.choice = as.numeric(rbinom(n(), 1, p1.vote)))%>%
mutate(p2.choice = as.numeric(rbinom(n(), 1, p2.vote)))%>%
mutate(p3.choice = as.numeric(rbinom(n(), 1, p3.vote)))%>%
mutate(p4.choice = as.numeric(rbinom(n(), 1, p4.vote)))
new.data <- rbind(new.data, new.alter)
}
my.list <- list(new.data, m1.model$coefficients)
return(my.list)
}
hybrid.group.search2 <- function(nruns, t){
correlation <- c()
regret <- c()
data.new <- c()
for(i in 1:nruns){
random.search <- group.recommendation.hybrid2(t)
random.ranking <- as.matrix(people.utility)%*%as.matrix(random.search[[2]][2:5])
correlation[i] <- cor(random.ranking, group.utility$group.score)
data.new[[i]] <- random.search[[1]]
print(correlation)
group.utility1 <- group.utility%>%
mutate(new.score = random.search[[2]][2]*p1.utility + random.search[[2]][3]*p2.utility + random.search[[2]][4] * p3.utility
+ random.search[[2]][5] * p4.utility)%>%
arrange(desc(new.score))
regret[i] <- group.utility$group.score[1] - group.utility1$group.score[1]
print(regret)
}
mylist <- list(correlation, regret, data.new)
return(mylist)
}
hybrid.group.search <- function(nruns, t){
correlation <- c()
regret <- c()
for(i in 1:nruns){
random.search <- group.recommendation.hybrid(t)
random.ranking <- as.matrix(people.utility)%*%as.matrix(random.search[[2]][2:5])
correlation[i] <- cor(random.ranking, group.utility$group.score)
print(correlation)
group.utility1 <- group.utility%>%
mutate(new.score = random.search[[2]][2]*p1.utility + random.search[[2]][3]*p2.utility + random.search[[2]][4] * p3.utility
+ random.search[[2]][5] * p4.utility)%>%
arrange(desc(new.score))
regret[i] <- group.utility$group.score[1] - group.utility1$group.score[1]
print(regret)
}
mylist <- list(correlation, regret)
return(mylist)
}
test.hybrid <- hybrid.group.search(20, 15)
test.hybrid2 <- hybrid.group.search(65, 15)
group.recommendation.hybrid <- function(t){
all.models <- c()
all.covmat <- c()
new.data <- group.utility
optimal.design.matrix <- as.matrix(group.utility[8:12])
doptimaldesign <- Dopt.design(t-5, data = optimal.design.matrix, formula = ~p1.utility + p2.utility + p3.utility + p4.utility)
id.optimal <- doptimaldesign$id
optimal.data <- subset(group.utility, id %in% id.optimal)
new.data <- optimal.data%>%
mutate(p1.vote = exp(p1.utility)/(1+exp(p1.utility)))%>%
mutate(p2.vote = exp(p2.utility)/(1+exp(p2.utility)))%>%
mutate(p3.vote = exp(p3.utility)/(1+exp(p3.utility)))%>%
mutate(p4.vote = exp(p4.utility)/(1+exp(p4.utility)))%>%
mutate(p1.choice = as.numeric(rbinom(n(), 1, p1.vote)))%>%
mutate(p2.choice = as.numeric(rbinom(n(), 1, p2.vote)))%>%
mutate(p3.choice = as.numeric(rbinom(n(), 1, p3.vote)))%>%
mutate(p4.choice = as.numeric(rbinom(n(), 1, p4.vote)))
outcome.choice <- as.matrix(new.data[,c("p1.choice", "p2.choice", "p3.choice", "p4.choice")])
o.choice <- as.data.frame(outcome.choice)%>%
mutate(yes = p1.choice + p2.choice + p3.choice + p4.choice)%>%
mutate(no = 4 - yes)%>%
dplyr::select(yes, no)
o.choice <- as.matrix(o.choice)
m1.model <- stan_glm(formula = o.choice ~ 1 + (p1.utility) + (p2.utility) + (p3.utility) + (p4.utility), data = new.data, family = binomial(),
prior = normal())
for (j in 11:t){
u.diagnostic <- c()
u.ranking <- c()
u.id <- c()
all.utility <- c()
all.models <- c()
id.chosen <- new.data$id
outcome.choice <- as.matrix(new.data[,c("p1.choice", "p2.choice", "p3.choice", "p4.choice")])
o.choice <- as.data.frame(outcome.choice)%>%
mutate(yes = p1.choice + p2.choice + p3.choice + p4.choice)%>%
mutate(no = 4 - yes)%>%
dplyr::select(yes, no)
o.choice <- as.matrix(o.choice)
p1.ut <- group.utility$p1.utility
p2.ut <- group.utility$p2.utility
p3.ut <- group.utility$p3.utility
p4.ut <- group.utility$p4.utility
m1.model <- stan_glm(formula = o.choice ~ 1 + (p1.utility) + (p2.utility) + (p3.utility) + (p4.utility), data = new.data, family = binomial(),
prior = normal())
var.model <- diag(m1.model$covmat)
var.left <- p1.ut^2*var.model[2]+p2.ut^2*var.model[3] + p3.ut^2 * var.model[4] + p4.ut^2 * var.model[5]
var.right <- p1.ut*p2.ut*m1.model$covmat[2, 3] + p1.ut*p3.ut*m1.model$covmat[2, 4] + p1.ut * p4.ut * m1.model$covmat[2, 5] +
p2.ut*p3.ut*m1.model$covmat[3, 4] + p2.ut*p4.ut*m1.model$covmat[3, 5] + p3.ut*p4.ut * m1.model$covmat[4, 5]
var.total <- var.left + var.right
people.utility <- group.utility[, 9:12]
mean.total <- as.matrix(people.utility)%*%m1.model$coefficients[2:5]
beta.init <- 2* log((4*j*pi^2)/(6))
new.utility <- as.data.frame(cbind(group.utility, var.total, mean.total))%>%
mutate(new.utility = mean.total + sqrt(beta.init)*sqrt(var.total))
max.utility.row <- which.max(new.utility$new.utility)
new.ranking <- new.utility%>%
arrange(desc(new.utility))
new.alt.id <- new.ranking$id[1]
new.alt <- group.utility%>%
dplyr::filter(id == new.alt.id)
new.alter <- new.alt%>%
mutate(p1.vote = exp(p1.utility)/(1+exp(p1.utility)))%>%
mutate(p2.vote = exp(p2.utility)/(1+exp(p2.utility)))%>%
mutate(p3.vote = exp(p3.utility)/(1+exp(p3.utility)))%>%
mutate(p4.vote = exp(p4.utility)/(1+exp(p4.utility)))%>%
mutate(p1.choice = as.numeric(rbinom(n(), 1, p1.vote)))%>%
mutate(p2.choice = as.numeric(rbinom(n(), 1, p2.vote)))%>%
mutate(p3.choice = as.numeric(rbinom(n(), 1, p3.vote)))%>%
mutate(p4.choice = as.numeric(rbinom(n(), 1, p4.vote)))
new.data <- rbind(new.data, new.alter)
}
my.list <- list(new.data, m1.model$coefficients)
return(my.list)
}
#Hybrid Approach with 2 UCB pairs
group.recommendation.hybrid2 <- function(t){
all.models <- c()
all.covmat <- c()
new.data <- group.utility
optimal.design.matrix <- as.matrix(group.utility[8:12])
doptimaldesign <- Dopt.design(t-2, data = optimal.design.matrix, formula = ~p1.utility + p2.utility + p3.utility + p4.utility)
id.optimal <- doptimaldesign$id
optimal.data <- subset(group.utility, id %in% id.optimal)
new.data <- optimal.data%>%
mutate(p1.vote = exp(p1.utility)/(1+exp(p1.utility)))%>%
mutate(p2.vote = exp(p2.utility)/(1+exp(p2.utility)))%>%
mutate(p3.vote = exp(p3.utility)/(1+exp(p3.utility)))%>%
mutate(p4.vote = exp(p4.utility)/(1+exp(p4.utility)))%>%
mutate(p1.choice = as.numeric(rbinom(n(), 1, p1.vote)))%>%
mutate(p2.choice = as.numeric(rbinom(n(), 1, p2.vote)))%>%
mutate(p3.choice = as.numeric(rbinom(n(), 1, p3.vote)))%>%
mutate(p4.choice = as.numeric(rbinom(n(), 1, p4.vote)))
outcome.choice <- as.matrix(new.data[,c("p1.choice", "p2.choice", "p3.choice", "p4.choice")])
o.choice <- as.data.frame(outcome.choice)%>%
mutate(yes = p1.choice + p2.choice + p3.choice + p4.choice)%>%
mutate(no = 4 - yes)%>%
dplyr::select(yes, no)
o.choice <- as.matrix(o.choice)
m1.model <- stan_glm(formula = o.choice ~ 1 + (p1.utility) + (p2.utility) + (p3.utility) + (p4.utility), data = new.data, family = binomial(),
prior = normal())
for (j in 14:t){
u.diagnostic <- c()
u.ranking <- c()
u.id <- c()
all.utility <- c()
all.models <- c()
id.chosen <- new.data$id
outcome.choice <- as.matrix(new.data[,c("p1.choice", "p2.choice", "p3.choice", "p4.choice")])
o.choice <- as.data.frame(outcome.choice)%>%
mutate(yes = p1.choice + p2.choice + p3.choice + p4.choice)%>%
mutate(no = 4 - yes)%>%
dplyr::select(yes, no)
o.choice <- as.matrix(o.choice)
p1.ut <- group.utility$p1.utility
p2.ut <- group.utility$p2.utility
p3.ut <- group.utility$p3.utility
p4.ut <- group.utility$p4.utility
m1.model <- stan_glm(formula = o.choice ~ 1 + (p1.utility) + (p2.utility) + (p3.utility) + (p4.utility), data = new.data, family = binomial(),
prior = normal())
var.model <- diag(m1.model$covmat)
var.left <- p1.ut^2*var.model[2]+p2.ut^2*var.model[3] + p3.ut^2 * var.model[4] + p4.ut^2 * var.model[5]
var.right <- p1.ut*p2.ut*m1.model$covmat[2, 3] + p1.ut*p3.ut*m1.model$covmat[2, 4] + p1.ut * p4.ut * m1.model$covmat[2, 5] +
p2.ut*p3.ut*m1.model$covmat[3, 4] + p2.ut*p4.ut*m1.model$covmat[3, 5] + p3.ut*p4.ut * m1.model$covmat[4, 5]
var.total <- var.left + var.right
people.utility <- group.utility[, 9:12]
mean.total <- as.matrix(people.utility)%*%m1.model$coefficients[2:5]
beta.init <- 2* log((4*j*pi^2)/(6))
new.utility <- as.data.frame(cbind(group.utility, var.total, mean.total))%>%
mutate(new.utility = mean.total + sqrt(beta.init)*sqrt(var.total))
max.utility.row <- which.max(new.utility$new.utility)
new.ranking <- new.utility%>%
arrange(desc(new.utility))
new.alt.id <- new.ranking$id[1]
new.alt <- group.utility%>%
dplyr::filter(id == new.alt.id)
new.alter <- new.alt%>%
mutate(p1.vote = exp(p1.utility)/(1+exp(p1.utility)))%>%
mutate(p2.vote = exp(p2.utility)/(1+exp(p2.utility)))%>%
mutate(p3.vote = exp(p3.utility)/(1+exp(p3.utility)))%>%
mutate(p4.vote = exp(p4.utility)/(1+exp(p4.utility)))%>%
mutate(p1.choice = as.numeric(rbinom(n(), 1, p1.vote)))%>%
mutate(p2.choice = as.numeric(rbinom(n(), 1, p2.vote)))%>%
mutate(p3.choice = as.numeric(rbinom(n(), 1, p3.vote)))%>%
mutate(p4.choice = as.numeric(rbinom(n(), 1, p4.vote)))
new.data <- rbind(new.data, new.alter)
}
my.list <- list(new.data, m1.model$coefficients)
return(my.list)
}
hybrid.group.search2 <- function(nruns, t){
correlation <- c()
regret <- c()
data.new <- c()
for(i in 1:nruns){
random.search <- group.recommendation.hybrid2(t)
random.ranking <- as.matrix(people.utility)%*%as.matrix(random.search[[2]][2:5])
correlation[i] <- cor(random.ranking, group.utility$group.score)
data.new[[i]] <- random.search[[1]]
print(correlation)
group.utility1 <- group.utility%>%
mutate(new.score = random.search[[2]][2]*p1.utility + random.search[[2]][3]*p2.utility + random.search[[2]][4] * p3.utility
+ random.search[[2]][5] * p4.utility)%>%
arrange(desc(new.score))
regret[i] <- group.utility$group.score[1] - group.utility1$group.score[1]
print(regret)
}
mylist <- list(correlation, regret, data.new)
return(mylist)
}
test.hybrid <- hybrid.group.search(20, 15)
test.hybrid2 <- hybrid.group.search(30, 15)
hybrid.correlation <- list.append(test.hybrid[[1]])
upperconfidence.correlation <- list.append(ntest.upperconfidence4[[1]])
mean(upperconfidence.correlation)
var(upperconfidence.correlation)
upperconfidence.regret <- list.append(ntest.upperconfidence4[[2]])
mean(upperconfidence.regret)
var(upperconfidence.regret)
doptimal.correlation <- list.append(test.doptimal2[[1]])
test.hybrid2.2 <- hybrid.group.search2(20, 15)
#Generating Figure 4 in Appendix F for all simulation results
boxplot(random.correlation, doptimal.correlation, upperconfidence.correlation, hybrid.correlation, test.hybrid2.1[[1]],
main = "Correlation of Recommendation Algorithm",
names = c("Information Maximation", "UCB", "Hybrid (5)", "Hybrid (2)"),
xlab = "Algorithms",
ylab = "Correlation with group truth")
#Generating Figure 4 in Appendix F for all simulation results
boxplot(doptimal.correlation, upperconfidence.correlation, hybrid.correlation, test.hybrid2.1[[1]],
main = "Correlation of Recommendation Algorithm",
names = c("Information Maximation", "UCB", "Hybrid (5)", "Hybrid (2)"),
xlab = "Algorithms",
ylab = "Correlation with group truth")
#Generating Figure 4 in Appendix F for all simulation results
boxplot(doptimal.correlation, upperconfidence.correlation, hybrid.correlation, test.hybrid2.2[[1]],
main = "Correlation of Recommendation Algorithm",
names = c("Information Maximation", "UCB", "Hybrid (5)", "Hybrid (2)"),
xlab = "Algorithms",
ylab = "Correlation with group truth")
boxplot(doptimal.regret, upperconfidence.regret, hybrid.regret, test.hybrid2.2[[2]],
main = "Regret of Recommendation Algorithm",
names = c("Random", "Information Maximation", "UCB", "Hybrid (5)", "Hybrid (2)"),
xlab = "Algorithms",
ylab = "Regret with group truth")
test.doptimal2[2]
boxplot(test.doptimal2[[2]], upperconfidence.regret, hybrid.regret, test.hybrid2.2[[2]],
main = "Regret of Recommendation Algorithm",
names = c("Random", "Information Maximation", "UCB", "Hybrid (5)", "Hybrid (2)"),
xlab = "Algorithms",
ylab = "Regret with group truth")
boxplot(test.doptimal2[[2]], upperconfidence.regret, test.hybrid[[2]], test.hybrid2.2[[2]],
main = "Regret of Recommendation Algorithm",
names = c("Random", "Information Maximation", "UCB", "Hybrid (5)", "Hybrid (2)"),
xlab = "Algorithms",
ylab = "Regret with group truth")
test.hybrid[[2]]
upperconfidence.regret
boxplot(test.doptimal2[[2]], upperconfidence.regret, test.hybrid[[2]], test.hybrid2.2[[2]],
main = "Regret of Recommendation Algorithm",
names = c("Information Maximation", "UCB", "Hybrid (5)", "Hybrid (2)"),
xlab = "Algorithms",
ylab = "Regret with group truth")
#Generating Figure 4 in Appendix F for all simulation results
boxplot(doptimal.correlation, upperconfidence.correlation, hybrid.correlation, test.hybrid2.2[[1]],
main = "Correlation of Recommendation Algorithm",
names = c("Information Maximation", "UCB", "Hybrid (5)", "Hybrid (2)"),
xlab = "Algorithms",
ylab = "Correlation with group truth")
